@page "/account/login"
@inject IAccountService AcccountService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

<div class="container mx-auto pt-6">
    <div class="w-full max-w-xs mx-auto">
        <div class="p-6 text-center">
            <i class="fad fa-dice-d10 fa-2x" style="color: dodgerblue;"></i>
        </div>
        <EditForm Model="@model" class="bg-white shadow-md rounded p-6" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="mb-4">
                <label class="block text-gray-700 text-sm mb-1" for="email">
                    Email
                </label>
                <InputText @bind-Value="model.Email" class="appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="email" placeholder="your@email.com" />
                <p class="text-red-500 text-xs italic mt-1">
                    <ValidationMessage For="@(() => model.Email)" />
                </p>
            </div>
            <div class="mb-6">
                <label class="block text-gray-700 text-sm mb-1" for="password">
                    Password
                </label>
                <InputText @bind-Value="model.Password" class="appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="password" type="password" placeholder="********" />
                <p class="text-red-500 text-xs italic mt-1">
                    <ValidationMessage For="@(() => model.Password)" />
                </p>
            </div>
            <div class="flex items-center justify-between">
                <button class="w-full bg-blue-500 hover:bg-blue-700 text-white text-center font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit" disabled="@isSubmitting">
                    @if(!isSubmitting) {
                        @("Sign In")
                    } else {
                        <i class="fad fa-spinner-third fa-spin" style="color: white;"></i>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private AuthenticateRequest model = new();
    private bool isSubmitting;

    private async void OnValidSubmit()
    {
        AlertService.Clear();

        isSubmitting = true;
        try
        {
            await AcccountService.Authenticate(model);
            //var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/movies";
            isSubmitting = false;
            NavigationManager.NavigateTo("/movies");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            isSubmitting = false;
            StateHasChanged();
        }
    }
}
